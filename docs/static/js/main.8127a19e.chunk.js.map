{"version":3,"sources":["logo.svg","assets/banner-1.png","components/Navbar/Navbar.jsx","Hooks/useMoneda.js","Hooks/useCriptomoneda.js","components/Alerta/Alerta.jsx","components/Formulario/Formulario.jsx","components/Cotizacion/Cotizacion.jsx","components/Spinner/Spinner.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","logo","width","height","loading","alt","useMoneda","label","stateInicial","opciones","useState","state","updateState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptoMoneda","CoinInfo","Id","Name","FullName","Alerta","mensaje","role","Formulario","setMoneda","setCripto","setCargando","listaCripto","setListaCripto","useEffect","a","Axios","get","respuesta","data","Data","consultarAPI","stateMoneda","SelectMoneda","stateCriptomoneda","SelectCriptoMoneda","error","setError","onSubmit","preventDefault","setTimeout","type","Cotizacion","cotizacion","Object","keys","length","TOSYMBOL","FROMSYMBOL","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","App","Banner","styled","img","Titulo","h2","Subtitulo","small","Separator","hr","moneda","cripto","setCotizacion","cargando","url","DISPLAY","cotizar","resultado","banner","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,oPCe5BC,G,MAXA,WACb,OACE,yBAAKC,UAAU,yCACb,wBAAIA,UAAU,wBACZ,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,MAAM,KAAKC,OAAO,KAAKC,QAAQ,OAAOC,IAAI,SADjF,kB,gBC2BSC,EAhCG,SAACC,EAAOC,EAAcC,GAAa,MAEvBC,mBAASF,GAFc,mBAE7CG,EAF6C,KAEtCC,EAFsC,KA6BpD,MAAO,CAACD,EAzBY,WACnB,OACC,kBAAC,WAAD,KACC,yBAAKZ,UAAU,cACd,2BAAOA,UAAU,cAAcQ,GAC/B,4BACCR,UAAU,eACVc,SAAU,SAACC,GAAD,OAAOF,EAAYE,EAAEC,OAAOC,QACtCA,MAAOL,GAEP,4BAAQK,MAAM,IAAd,uBACCP,EAASQ,KAAI,SAACC,GACd,OACC,4BAAQC,IAAKD,EAAOE,OAAQJ,MAAOE,EAAOE,QACxCF,EAAOG,eAWYT,ICGdU,EAhCS,SAACf,EAAOC,EAAcC,GAAa,MAE7BC,mBAASF,GAFoB,mBAEnDG,EAFmD,KAE5CC,EAF4C,KA6B1D,MAAO,CAACD,EAzBa,WACpB,OACC,kBAAC,WAAD,KACC,yBAAKZ,UAAU,cACd,2BAAOA,UAAU,cAAcQ,GAC/B,4BACCR,UAAU,eACVc,SAAU,SAACC,GAAD,OAAOF,EAAYE,EAAEC,OAAOC,QACtCA,MAAOL,GAEP,4BAAQK,MAAM,IAAd,uBACCP,EAASQ,KAAI,SAACC,GACd,OACC,4BAAQC,IAAKD,EAAOK,SAASC,GAAIR,MAAOE,EAAOK,SAASE,MACtDP,EAAOK,SAASG,iBAWGd,IChBde,EAZA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,OACE,yBAAK7B,UAAU,iCAAiC8B,KAAK,SACnD,2BAAID,KCgEKE,EA7DI,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,YAAiB,EAErBvB,mBAAS,IAFY,mBAEpDwB,EAFoD,KAEvCC,EAFuC,KAI3DC,qBAAU,YACS,uCAAG,4BAAAC,EAAA,4DAEnB,0EAFmB,SAGIC,IAAMC,IAD7B,2EAFmB,OAGdC,EAHc,OAIpBL,EAAeK,EAAUC,KAAKC,MAJV,2CAAH,qDAMlBC,KACE,IAEH,IAd2D,EAoBvBrC,EAAU,mBAAoB,GANlD,CACf,CAAEc,OAAQ,MAAOC,OAAQ,mBACzB,CAAED,OAAQ,MAAOC,OAAQ,mBACzB,CAAED,OAAQ,MAAOC,OAAQ,UAjBiC,mBAoBpDuB,EApBoD,KAoBvCC,EApBuC,OAsBVvB,EAAgB,yBAA0B,GAAIY,GAtBpC,mBAsBnDY,EAtBmD,KAsBhCC,EAtBgC,OAwBhCrC,oBAAS,GAxBuB,mBAwBnDsC,EAxBmD,KAwB5CC,EAxB4C,KAwC3D,OACG,0BAAMC,SAfa,SAAApC,GACnBA,EAAEqC,iBACiB,KAAhBP,GAA4C,KAAtBE,GAIzBb,GAAY,GACZmB,YAAW,WACTH,GAAS,GACTlB,EAAUa,GACVZ,EAAUc,KACT,MARDG,GAAS,KAaRD,EAAQ,kBAAC,EAAD,CAAQpB,QAAQ,oCAAsC,KAClE,kBAACiB,EAAD,MACA,kBAACE,EAAD,MACA,4BACCM,KAAK,SACLtD,UAAU,yEAFX,oBCXYuD,EAxCI,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACnB,OAAsC,IAAnCC,OAAOC,KAAKF,GAAYG,OAAqB,KAEhD,yBAAK3D,UAAU,QACX,yBAAKA,UAAU,gCACZwD,EAAWI,SADd,OAC4BJ,EAAWK,YAE1C,yBAAK7D,UAAU,aACV,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,qEACZ,uCAGA,0BAAMA,UAAU,kCAAkCwD,EAAWM,QAE/D,wBAAI9D,UAAU,qEAAd,iBAEE,0BAAMA,UAAU,kCAAkCwD,EAAWO,UAE/D,wBAAI/D,UAAU,qEAAd,iBAEE,0BAAMA,UAAU,kCAAkCwD,EAAWQ,SAE/D,wBAAIhE,UAAU,qEAAd,gCAEE,0BAAMA,UAAU,kCAAkCwD,EAAWS,oBAInE,yBAAKjE,UAAU,0BAAf,+BACyBwD,EAAWU,cCrB3BC,G,MATC,WACf,OACC,yBAAKnE,UAAU,WACd,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,sB,uiBC0EHoE,MAtEf,WACC,IAAMC,EAASC,IAAOC,IAAV,KAKNC,EAASF,IAAOG,GAAV,KAKNC,EAAYJ,IAAOK,MAAV,KAITC,EAAYN,IAAOO,GAAV,KAfD,EAoBelE,mBAAS,IApBxB,mBAoBNmE,EApBM,KAoBE9C,EApBF,OAqBerB,mBAAS,IArBxB,mBAqBNoE,EArBM,KAqBE9C,EArBF,OAsBuBtB,mBAAS,IAtBhC,mBAsBN6C,EAtBM,KAsBMwB,EAtBN,OAuBmBrE,oBAAS,GAvB5B,mBAuBNsE,EAvBM,KAuBI/C,EAvBJ,KAyBbG,qBAAU,WACM,KAAXyC,GAA4B,KAAXC,GACP,uCAAG,8BAAAzC,EAAA,6DACR4C,EADQ,sEAC6DH,EAD7D,kBAC6ED,GAD7E,SAEUvC,IAAMC,IAAI0C,GAFpB,OAERzC,EAFQ,OAGdP,GAAY,GAEZ8C,EAAcvC,EAAUC,KAAKyC,QAAQJ,GAAQD,IAL/B,2CAAH,oDAObM,KACC,CAACN,EAAQC,IAEZ,IAAIM,EAAYJ,EAAY,kBAAC,EAAD,MAAiB,kBAAC,EAAD,CAAYzB,WAAYA,IAEtE,OACC,kBAAC,WAAD,KACC,kBAAC,EAAD,MACA,yBAAKxD,UAAU,aACd,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mKACd,kBAACqE,EAAD,CAAQpE,IAAKqF,IAAQhF,IAAI,WACzB,yBAAKN,UAAU,sBACd,kBAACwE,EAAD,yCACA,kBAACE,EAAD,CAAW1E,UAAU,gBAArB,qCAIJ,kBAAC4E,EAAD,MACA,yBAAK5E,UAAU,OACd,yBAAKA,UAAU,0CACR,kBAAC,EAAD,CACEgC,UAAWA,EACXC,UAAWA,EACXC,YAAaA,KAGjB,yBAAKlC,UAAU,0CACZqF,OC7DOE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtD,GACLuD,QAAQvD,MAAMA,EAAMwD,c","file":"static/js/main.8127a19e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.023c9740.svg\";","module.exports = __webpack_public_path__ + \"static/media/banner-1.97ea86fd.png\";","import React from 'react';\nimport logo from '../../logo.svg';\nimport './Navbar.css'\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark sticky-top\">\n      <h1 className=\"navbar-brand mb-0 h1\">\n        <img src={logo} className=\"App-logo\" width=\"30\" height=\"30\" loading=\"lazy\" alt=\"logo\" />\n        CriptoReact\n      </h1>\n    </nav>\n  );\n};\n\nexport default Navbar;","import React, { Fragment, useState } from 'react'\n\nconst useMoneda = (label, stateInicial, opciones) => {\n\t// State de custom hook\n\tconst [state, updateState] = useState(stateInicial)\n\n\tconst Seleccionar = () => {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<label className='text-light'>{label}</label>\n\t\t\t\t\t<select\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={(e) => updateState(e.target.value)}\n\t\t\t\t\t\tvalue={state}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=''>-- Elige aquí --</option>\n\t\t\t\t\t\t{opciones.map((opcion) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<option key={opcion.codigo} value={opcion.codigo}>\n\t\t\t\t\t\t\t\t\t{opcion.nombre}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t)\n\t}\n\n\t// Retorna state, interfaz y funcion para manipular state\n\treturn [state, Seleccionar, updateState]\n}\n\nexport default useMoneda\n","import React, { Fragment, useState } from 'react'\n\nconst useCriptoMoneda = (label, stateInicial, opciones) => {\n\t// State de custom hook\n\tconst [state, updateState] = useState(stateInicial)\n\t\n  const Seleccionar = () => {\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<label className='text-light'>{label}</label>\n\t\t\t\t\t<select\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tonChange={(e) => updateState(e.target.value)}\n\t\t\t\t\t\tvalue={state}\n\t\t\t\t\t>\n\t\t\t\t\t\t<option value=''>-- Elige aquí --</option>\n\t\t\t\t\t\t{opciones.map((opcion) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>\n\t\t\t\t\t\t\t\t\t{opcion.CoinInfo.FullName}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})}\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t</Fragment>\n\t\t)\n\t}\n\n\t// Retorna state, interfaz y funcion para manipular state\n\treturn [state, Seleccionar, updateState]\n}\n\nexport default useCriptoMoneda\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Alerta = ({mensaje}) => {\n  return (\n    <div className=\"alert alert-danger text-center\" role=\"alert\">\n      <b>{mensaje}</b>\n    </div>\n  );\n};\n\nAlerta.propTypes = {\n  mensaje: PropTypes.string.isRequired\n};\n\nexport default Alerta;","import React, { useEffect, useState } from 'react'\nimport Axios from 'axios'\nimport PropTypes from 'prop-types';\n\nimport useMoneda from '../../Hooks/useMoneda'\nimport useCriptoMoneda from '../../Hooks/useCriptomoneda'\n\nimport Alerta from '../Alerta/Alerta'\n\nconst Formulario = ({setMoneda, setCripto, setCargando}) => {\n\t// State: Lista de criptomonedas\n\tconst [listaCripto, setListaCripto] = useState([])\n\n\tuseEffect(() => {\n\t\tconst consultarAPI = async () => {\n\t\t\tconst url =\n\t\t\t\t'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD'\n\t\t\tconst respuesta = await Axios.get(url)\n\t\t\tsetListaCripto(respuesta.data.Data)\n\t\t}\n\t\tconsultarAPI()\n\t}, [])\n\n\tconst MONEDAS = [\n\t\t{ codigo: 'COP', nombre: 'Peso Colombiano' },\n\t\t{ codigo: 'USD', nombre: 'Dolar Americano' },\n\t\t{ codigo: 'EUR', nombre: 'Euro' },\n\t]\n\t// Utilizar useMoneda (array destructuring)\n\tconst [stateMoneda, SelectMoneda] = useMoneda('Elige una moneda', '', MONEDAS)\n\t// Utilizar useCriptomoneda (array destructuring)\n  const [stateCriptomoneda, SelectCriptoMoneda] = useCriptoMoneda('Elige una criptomoneda', '', listaCripto)\n  // State para error\n  const [error, setError] = useState(false);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if(stateMoneda === '' || stateCriptomoneda === '') {\n      setError(true);\n      return;\n    }\n    setCargando(true);\n    setTimeout(() => {\n      setError(false);\n      setMoneda(stateMoneda);\n      setCripto(stateCriptomoneda);\n    }, 500);\n  };\n\n\treturn (\n    <form onSubmit={handleSubmit}>\n      {error ? <Alerta mensaje=\"Todos los campos son requeridos\"/> : null}\n\t\t\t<SelectMoneda />\n\t\t\t<SelectCriptoMoneda />\n\t\t\t<button\n\t\t\t\ttype='submit'\n\t\t\t\tclassName='btn btn-warning btn-lg btn-block text-uppercase font-weight-bold mt-5'\n\t\t\t>\n\t\t\t\tCotiza ahora!!\n\t\t\t</button>\n\t\t</form>\n\t)\n}\n\nFormulario.propTypes = {\n  setMoneda: PropTypes.func.isRequired,\n  setCripto: PropTypes.func.isRequired,\n  setCargando: PropTypes.func.isRequired\n};\n\nexport default Formulario\n","import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst Cotizacion = ({cotizacion}) => {\n  if(Object.keys(cotizacion).length === 0) return null;\n\treturn (\n\t\t<div className='card'>\n      <div className='card-header font-weight-bold'>\n        {cotizacion.TOSYMBOL} -> {cotizacion.FROMSYMBOL}\n      </div>\n\t\t\t<div className='card-body'>\n        <ul className=\"list-group\">\n          <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n            <h5>\n              Precio:\n            </h5>\n            <span className=\"badge badge-warning badge-pill\">{cotizacion.PRICE}</span>\n          </li>\n          <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n            Máximo hoy:\n            <span className=\"badge badge-warning badge-pill\">{cotizacion.HIGHDAY}</span>\n          </li>\n          <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n            Mínimo hoy:\n            <span className=\"badge badge-warning badge-pill\">{cotizacion.LOWDAY}</span>\n          </li>\n          <li className=\"list-group-item d-flex justify-content-between align-items-center\">\n            Valoración últimas 24h:\n            <span className=\"badge badge-warning badge-pill\">{cotizacion.CHANGEPCT24HOUR}</span>\n          </li>\n        </ul>\n\t\t\t</div>\n      <div className='card-footer text-muted'>\n        Última actualización: {cotizacion.LASTUPDATE}\n      </div>\n\t\t</div>\n\t)\n}\n\nCotizacion.propTypes = {\n  cotizacion: PropTypes.object.isRequired\n};\n\nexport default Cotizacion\n","import React from 'react'\nimport './Spinner.css';\n\nconst Spinner = () => {\n\treturn (\n\t\t<div className='spinner'>\n\t\t\t<div className='double-bounce1'></div>\n\t\t\t<div className='double-bounce2'></div>\n\t\t</div>\n\t)\n}\n\nexport default Spinner\n","import React, { Fragment, useState, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nimport Navbar from './components/Navbar/Navbar'\nimport Formulario from './components/Formulario/Formulario'\nimport Cotizacion from './components/Cotizacion/Cotizacion'\nimport Spinner from './components/Spinner/Spinner'\n\nimport banner from './assets/banner-1.png'\nimport Axios from 'axios';\n\nfunction App() {\n\tconst Banner = styled.img`\n\t\twidth: 200px;\n\t\tdisplay: block;\n\t\tmargin: 0px auto;\n\t`\n\tconst Titulo = styled.h2`\n\t\tcolor: white;\n\t\ttext-align: center;\n\t\ttext-transform: uppercase;\n\t`\n\tconst Subtitulo = styled.small`\n\t\tcolor: white;\n\t\ttext-align: center;\n\t`\n\tconst Separator = styled.hr`\n\t\tborder-top: 1px solid #3e4760;\n\t\tmargin: 0px auto;\n\t`\n\n  const [moneda, setMoneda] = useState('');\n  const [cripto, setCripto] = useState('');\n  const [cotizacion, setCotizacion] = useState({});\n  const [cargando, setCargando] = useState(false);\n\n  useEffect(() => {\n    if(moneda === '' || cripto === '') return;\n    const cotizar = async () => {\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${cripto}&tsyms=${moneda}`;\n      const respuesta = await Axios.get(url);\n      setCargando(false);\n      // Esta es la forma de acceder a los datos de respuesta por la API\n      setCotizacion(respuesta.data.DISPLAY[cripto][moneda]);\n    };\n    cotizar();\n  }, [moneda, cripto]);\n\n  let resultado = cargando ? (<Spinner />)  : (<Cotizacion cotizacion={cotizacion} />);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<Navbar />\n\t\t\t<div className='container'>\n\t\t\t\t<div className='row mb-3'>\n\t\t\t\t\t\t<div className='col-12 col-sm-12 col-md-10 offset-md-1 col-lg-8 offset-lg-2 d-flex flex-column flex-sm-column flex-md-row flex-lg-row justify-content-center align-items-center'>\n\t\t\t\t\t\t\t<Banner src={banner} alt='banner' />\n\t\t\t\t\t\t\t<div className='d-flex flex-column'>\n\t\t\t\t\t\t\t\t<Titulo>Cotiza criptomonedas al instante</Titulo>\n\t\t\t\t\t\t\t\t<Subtitulo className=\"text-warning\">Usando las 10 más populares</Subtitulo>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Separator />\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='col-12 col-sm-12 col-md-6 col-lg-6 p-3'>\n            <Formulario\n              setMoneda={setMoneda}\n              setCripto={setCripto}\n              setCargando={setCargando}\n            />\n\t\t\t\t\t</div>\n          <div className='col-12 col-sm-12 col-md-6 col-lg-6 p-3'>\n            {resultado}\n          </div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</Fragment>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}